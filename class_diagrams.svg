<svg onload="init(evt)" xmlns="http://www.w3.org/2000/svg" width="100%" height="100%"
    xmlns:xlink="http://www.w3.org/1999/xlink"> 


	<script type="application/ecmascript" xlink:href="lib/svg.js"></script> 
	<script type="application/ecmascript" xlink:href="c.js"></script> 
	<script type="application/ecmascript" xlink:href="constructors.js"></script> 
	<script type="application/ecmascript" xlink:href="batikCompatibility.js"></script> 
	<script type="application/ecmascript" xlink:href="lib/jquery-1.2.6.js"></script> 
	<script type="application/ecmascript" xlink:href="lib/jquery-svg/jquery.svg.js"></script> 
	<script type="application/ecmascript"><![CDATA[ 
	var svgWrapper;  
	function init(evt) {     
		svg = new $.svg._wrapperClass(         
			evt.target.ownerDocument.documentElement,
			{clientWidth: "100%", clientHeight: "100%"});     

		var constraintGraph = [];
		var visualObjects = [];

		function requestLayout(){
			//goal of this function is to act as a listener, decoupling those objects that can change the scene graph (visual object or constraints), 
			//from being repsonsible for re-applying layout
			//right now we just pass the request straight through, but this could be more sophisticated
			constraintModule.resolveGraphicalConstraints(visualObjects,constraintGraph);
		}

		var svgModule = SVGHelper();
		var constraintModule = ConstraintModule(svgModule);
		var constructors = setupConstructors(null,constraintModule,constraintGraph,visualObjects,requestLayout); 

		document.documentElement.addEventListener("mousedown",function(e){
			constructors.ClassIcon(e.clientX,e.clientY);
		},false);

		
	} // ]]> </script> 

	<!--
	<script xlink:href="2D.js"/>
	<script xlink:href="Intersection.js"/>
	<script xlink:href="getDomInterface.js"/>
	<script xlink:href="drag-and-drop.js"/>
	<script xlink:href="2D.js"/>
	<script xlink:href="svg.js"/>
	<script xlink:href="c.js"/>
	-->
	<style>
		line.edge,path.edge { 
			marker-end: url(#Triangle);
			stroke: black; 
			fill: none;
		}

		text {
			fill : black;
			stroke : none;
			dominant-baseline : hanging;
		}

		circle {
			fill : blue;
			stroke : black;
		}

		rect {
			fill : white;
			stroke : black;
		}

		rect#dragging {
			fill : none;
			stroke : black;
			stroke-dasharray : 1;
		}

		line {
			fill : none;
			stroke : black;
		}
	</style>
	<defs>
		<marker id="Triangle"
			viewBox="-10 0 10 10" refX="0" refY="5" 
			markerUnits="strokeWidth"
			markerWidth="10" markerHeight="10"
			orient="auto">
			<path d="M -10 0 L 0 5 L -10 10 z" />
		</marker>
	</defs>
</svg>
